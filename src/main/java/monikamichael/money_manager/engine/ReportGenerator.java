package monikamichael.money_manager.engine;

import java.io.PrintWriter;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public class ReportGenerator {
    public static void forAllMonths(final Database db, final PrintWriter writer) {
        writer.println("<html>");
        writer.println("  <head>");
        writer.println("    <title>Financial report</title>");
        writer.println("  </head>");
        writer.println("  <body>");
        writer.println("    <h1>Financial report</h1>");
        writer.println("    <p>");
        writer.println("      Report generated by Money Manager for every month");
        writer.println("      included in the database.");
        writer.println("    </p>");
        db.executeSqlQuery("SELECT YEAR, MONTH FROM MONTHS", new SqlQueryClient() {
            @Override
            public void onStatementReady(PreparedStatement statement) throws SQLException {
            }

            @Override
            public void onResult(ResultSet resultSet) throws SQLException {
                while (resultSet.next()) {
                    int year = resultSet.getInt("YEAR");
                    int month = resultSet.getInt("MONTH");
                    MonthData data = MonthData.retrieveForMonth(db, year, month);

                    writer.println("<p>");
                    writer.println("<h2>" + Month.fromInt(month) + " " + year + "</h2>");

                    writer.println("<table>");

                    writer.println("  <tr>");
                    writer.println("    <th>account</th>");
                    writer.println("    <th>beginning</th>");
                    writer.println("    <th>end</th>");
                    writer.println("    <th>balance</th>");
                    writer.println("  </tr>");

                    writer.println("  <tr>");
                    writer.println("    <td>main</th>");
                    writer.println("    <td>" + Currency.toString(data.accountBegin) + "</td>");
                    writer.println("    <td>" + Currency.toString(data.accountEnd) + "</td>");
                    writer.println("    <td>" + Currency.toString(data.accountEnd - data.accountBegin) + "</td>");
                    writer.println("  </tr>");

                    writer.println("  <tr>");
                    writer.println("    <td>wallet</th>");
                    writer.println("    <td>" + Currency.toString(data.walletBegin) + "</td>");
                    writer.println("    <td>" + Currency.toString(data.walletEnd) + "</td>");
                    writer.println("    <td>" + Currency.toString(data.walletEnd - data.walletBegin) + "</td>");
                    writer.println("  </tr>");

                    writer.println("  <tr>");
                    writer.println("    <td>PayPal</th>");
                    writer.println("    <td>" + Currency.toString(data.payPalBegin) + "</td>");
                    writer.println("    <td>" + Currency.toString(data.payPalEnd) + "</td>");
                    writer.println("    <td>" + Currency.toString(data.payPalEnd - data.payPalBegin) + "</td>");
                    writer.println("  </tr>");

                    writer.println("  <tr>");
                    writer.println("    <td>TOTAL</th>");
                    writer.println("    <td>" + Currency.toString(data.totalBegin()) + "</td>");
                    writer.println("    <td>" + Currency.toString(data.totalEnd()) + "</td>");
                    writer.println("    <td>" + Currency.toString(data.totalEnd() - data.totalBegin()) + "</td>");
                    writer.println("  </tr>");

                    writer.println("</table>");

                    writer.println("After previous month: " + Currency.toString(data.afterPreviousMonth) + "<br>");
                    writer.println("Salary: " + Currency.toString(data.salary) + "<br>");

                    writer.println("Own expenses:<br><ul>");
                    for (Entry entry : data.ownExpenses)
                        writer.println("<li>" + Currency.toString(entry.value) + ": " + entry.description + "</li>");
                    writer.println("</ul>");

                    writer.println("Periodic expenses:<br><ul>");
                    for (Entry entry : data.periodicExpenses)
                        writer.println("<li>" + Currency.toString(entry.value) + ": " + entry.description + "</li>");
                    writer.println("</ul>");

                    writer.println("Other expenses:<br><ul>");
                    for (Entry entry : data.otherExpenses)
                        writer.println("<li>" + Currency.toString(entry.value) + ": " + entry.description + "</li>");
                    writer.println("</ul>");

                    writer.println("Out-of-budget expenses:<br><ul>");
                    for (Entry entry : data.outOfBudgetExpenses)
                        writer.println("<li>" + Currency.toString(entry.value) + ": " + entry.description + "</li>");
                    writer.println("</ul>");

                    writer.println("Debts:<br><ul>");
                    for (Entry entry : data.debts)
                        writer.println("<li>" + Currency.toString(entry.value) + ": " + entry.description + "</li>");
                    writer.println("</ul>");

                    writer.println("Transfers from savings:<br><ul>");
                    for (Entry entry : data.transfersFromSavings)
                        writer.println("<li>" + Currency.toString(entry.value) + ": " + entry.description + "</li>");
                    writer.println("</ul>");

                    writer.println("</p>");
                }
            }
        });
        writer.println("  </body>");
        writer.println("</html>");
    }
}
